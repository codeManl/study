* []

```rust
impl Solution {
    pub fn is_valid(s: String) -> bool {
        let mut stack = vec!['0'];
        for c in s.chars() {
            match c {
                '(' | '[' | '{' => {stack.push(c)},
                ')' => {if stack.pop().unwrap() != '(' {return false}},
                ']' => {if stack.pop().unwrap() != '[' {return false}},
                '}' => {if stack.pop().unwrap() != '{' {return false}},
                _ => (),
            }
        }
        stack.len() == 1
    }
}
```

* []

```c
bool isValid(char * s){
    int len = strlen(s);
    if (len & 1)
        return false;
    int i = 1;
    char c;
    int stack[len + 1];
    stack[0] = '0';
    while (c = *s++) {
        printf("%c\n", c);
        if (c == '(' || c == '[' || c == '{') {
            stack[i++] = c;
        } else if (c == ')') {
            if (stack[--i] != '(')
                return false;
        } else if (c == ']') {
            if (stack[--i] != '[')
                return false;
        } else if (stack[--i] != '{') {
            return false;
        }
    }
    return i == 1;
}
```

