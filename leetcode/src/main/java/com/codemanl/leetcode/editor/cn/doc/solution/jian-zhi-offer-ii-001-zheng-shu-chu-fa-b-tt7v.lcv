1. 为了求得15/2的商，可以不断从15里减去2，当减去7个2之后余数是1，此时不能再减去更多的2，因此商是7。
2. 上述讨论被除数和除数都是正数。在计算的时候将负数转化为正数，对于32位整数而言，最小的负数是-2^31,将其转化为正数是2^31，导致溢出。因此将正数转化为负数不会导致溢出。
3. 设置一个变量，用来记录正数个数，以便在最后的结果调整正负号。
4. 特殊情况，可能溢出的情况讨论，由于是整数除法，除数不为0，商的值一定小于等于被除数的绝对值，因此，int型溢出只有一种情况，(-2^31)/(-1) = 2^31。

如果被除数是n，除数是1。*时间复杂度O(n)*

* 

```
public int divide(int dividend, int divisor) {
        //特殊处理 -2^31/ -1 = 2^31 溢出
        if(dividend == 0x80000000 && divisor == -1){
            return 0x7FFFFFFF; 
        }

        int negative = 2;//用于记录正数个数
        //由于负数转为正数 -2^31 -> 2^31 越界，所以采用正数转为负数
        if(dividend > 0){
            negative --;
            dividend = -dividend;
        }

        if(divisor > 0){
            negative --;
            divisor = -divisor;
        }

        //计算两个负数相除
        int result = 0;
        while(dividend <= divisor){   
            dividend -= divisor;
            result++;
        }
        
        return negative == 1 ? -result : result;

    }
```

![image.png](https://pic.leetcode-cn.com/1628084431-NtYIYz-image.png)

# 优化解法

1. 问题分析：当被除数很大但除数很小，减法操作会执行次数很多。例如，2^31/1 执行2^31次减法。
2. 当被除数大于除数时，继续比较判断被除数是否大于除数的2倍。如果是，继续判断被除数是否大于除数的4倍，8倍，16倍，……如果被除数最多大于除数的2k倍，那么将被除数减去除数的2k倍，然后将剩余的被除数重复前面的步骤。
3. 为了求得15/2的商，先从15里减去8 (2^3)，得到7；再从7里减去4(2^2),得到3；再从3里减去2(2^1),得到1，此时1小于2，因此商是3+2+1=7。
4. 上述讨论被除数和除数都是正数。在计算的时候将负数转化为正数，对于32位整数而言，最小的正数是-2^31,将其转化为正数是2^31，导致溢出。因此将正数转化为负数不会导致溢出。
5. 设置一个变量，用来记录正数个数，以便在最后的结果调整正负号。
6. 特殊情况，可能溢出的情况讨论，由于是整数除法，除数不为0，商的值一定小于等于被除数的绝对值，因此，int型溢出只有一种情况，(-2^31)/(-1) = 2^31。
7. 在计算两个负数的除法时，防止每次计算除数的2倍，会导致大数溢出，要保证计算2倍之后的数大于(-2^31)/2。如果时计算两个正数的除法，要保证计算2倍之后的数小于(2^31-1)/2。
8. 特殊数值（16进制写法）：0x80000000表示32位int型最小负整数-2^31, 0x7FFFFFFF表示32位int型最大正整数 0xc0000000表示32位int型最小负整数的一半(-2^31)/2。
   如果被除数是n，除数是1。*时间复杂度O(log**n**)*

* 

```
  public int divide(int dividend, int divisor) {
        //-2^31/ -1 = 2^31 溢出
        if(dividend == 0x80000000 && divisor == -1){
            return 0x7FFFFFFF; 
        }

        int negative = 2;//用于记录正数个数
        //由于负数转为正数 -2^31 -> 2^31 越界，所以采用正数转为负数
        if(dividend > 0){
            negative --;
            dividend = -dividend;
        }

        if(divisor > 0){
            negative --;
            divisor = -divisor;
        }

        //计算两个负数相除
        int result = 0;
        while(dividend <= divisor){
            int value = divisor;//统计减数
            int quotient = 1;//统计商
            while(value > 0xc0000000 && value + value >= dividend){//value > 0xc0000000 防止value*2溢出
                quotient += quotient;//如果可以用乘法 quotient*=2
                value += value;//如果可以用乘法 value*=2
            }

            result += quotient;
            dividend -= value;
        }
        return negative == 1 ? -result : result;

    }
```

![image.png](https://pic.leetcode-cn.com/1628085280-xQCsUo-image.png)
