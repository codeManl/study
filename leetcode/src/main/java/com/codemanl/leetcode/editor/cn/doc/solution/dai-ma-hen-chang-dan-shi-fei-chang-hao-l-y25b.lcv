### 代码

* javascript

```javascript
function fn(board, pos, cache, word, index) {
      const [a, b] = pos;
      let len = board.length;
      let lenx = board[0].length;
      let char = word[index];
      // 上
      if (a > 0) {
        let key = (a - 1) + ',' + b;
        if (board[a - 1][b] === char && !cache[key]) {
          let cache1 = {...cache};
          cache1[key] = 1;
          let index1 = index + 1;
          if (index1 === word.length) {
            return true;
          } else {
            let r = fn(board, [a - 1, b], cache1, word, index1);
            if(r){
              return true;
            }
          }
        }
      }
      // 下
      if (a < len - 1) {
        let key = (a + 1) + ',' + b;
        if (board[a + 1][b] === char && !cache[key]) {
          let cache1 = {...cache};
          cache1[key] = 1;
          let index1 = index + 1;
          if (index1 === word.length) {
            return true;
          }else {
            let r = fn(board, [a + 1, b], cache1, word, index1)
            if(r){
              return true;
            }
          }
        }
      }
      // 右
      if (b < lenx - 1) {
        let key = a + ',' + (b + 1);
        if (board[a][b + 1] === char && !cache[key]) {
          let cache1 = {...cache};
          cache1[key] = 1;
          let index1 = index + 1;
          if (index1 === word.length) {
            return true;
          }else {
            let r = fn(board, [a, b + 1], cache1, word, index1)
            if(r){
              return true;
            }
          }
        }
      }
      // 左
      if (b > 0) {
        let key = a + ',' + (b - 1);
        if (board[a][b - 1] === char && !cache[key]) {
          let cache1 = {...cache};
          cache1[key] = 1;
          let index1 = index + 1;
          if (index1 === word.length) {
            return true;
          }else {
            let r = fn(board, [a, b - 1], cache1, word, index1)
            if(r){
              return true;
            }
          }
        }
      }

      return false;
    }

   var exist = function (board, word) {
    let r = false;
    for (let a = 0; a < board.length; a++) {
      let t = false;
      for (let b = 0; b < board[0].length; b++) {
        if (board[a][b] === word[0]) {
          if(word.length === 1){
            t = true;
            break;
          }else {
            let map = {}
            map[a + ',' + b] = 1;
            t = fn(board, [a, b], map, word, 1)
            if(t){
              break;
            }
          }
        }
      }
      if (t) {
        r = true;
        break;
      }
    }
    return r;
  };
```

