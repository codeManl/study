### 解题思路

1.被除数与除数，一共有四种组合情况，处理是，无论两个数是正还是负，均将其转换成负数带入处理
2.转换完后，将除数翻倍，2倍，4倍，8倍。。。以此类推与被除数进行比较，只要被除数比除数小，就说明绝对值被除数此时比除数大
例：15 ÷ -7 = 2   传入DivideCore函数时，形参是-15和-7，-7+-7=-14，此时-15小于-14，此时商的绝对值为2
3.最终的出来的商的值根据两数的符号确定

### 代码

* cpp

```cpp
class Solution {
public:
    int divide(int a, int b) {
        //一种情况会导致溢出，0x7fffffff是32位int表示的最大正整数
        if(a== 0x80000000 && b==-1){return 0x7fffffff;} 
        //这里是个补丁，不加的话，执行错误：mul那个临时的变量会有溢出错误   
        if(a== 0x80000000 && b==1){return 0x80000000;}
        
        //negeative是一个标识性质的变量，一开始我的思路是分三种情况，2负数，2整数，1正1负
        int negative = 2;
        
        if(a>0){ 
            a = -a; 
            negative--;    
        }
        
        if(b>0){
            b = -b;  
            negative--;
        }

        //经过上面两个判断，传入的两个参数均为负数
        int result = DivideCore(a,b); 

        //这里也可以简洁地有三目运算符号写
        return negative == 1 ? -result : result;
        /*if(negative==1){result = -result;}
        return result;*/
    }

    int DivideCore(int divider,int divisor){

            int multiple = 0;
            
            while(divider <= divisor){
                int mul = 1;              //mul:是multiple缩了一段，做个临时的记录变量
                int dio = divisor;        //dio:是divisor缩了一段，做个临时的记录变量
            
                //dio >= 0xc0000000这句还必须得加上，不然又是变量表示溢出
                //0xc0000000是负数的一半，c那位对应二进制是1100，第一位的1表示是负数，后一位1算起来就是2的31次方
                //至于为什么是负数的一半，如果超过一半，在dio一次翻倍的时候就超出范围了
                while( dio >= 0xc0000000 &&divider <= dio + dio){
                    mul += mul;
                    dio += dio;
                }
                multiple += mul;  //把已经求得的倍数进行累加
                divider -= dio;   //都是负数，所以负负得正
                dio = divisor;    //将除数进行恢复
            }  
            return multiple; 
    }

private: 

};
```

